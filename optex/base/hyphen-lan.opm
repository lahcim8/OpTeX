%% This is part of OpTeX project, see http://petr.olsak.net/optex

\_codedecl \langlist {Initialization of hypenation patterns <2020-03-10>} % preloaded in format  

   \_doc -----------------------------
   The <iso-code> means a shortcut of language name (mostly by ISO 639-1).
   The following control sequences are used for language switching:
   \begitems
   * `\_lan:<number>` expands to `<iso-code>` of the language.
     The number is internal number of languages used as a value of
     `\language` register.
   * `\_ulan:<long-lang>` expands to `<iso-code>` too. This is transformation
     from long name of language (lowercase letters) to <iso-code>.
   * `\_<iso-code>Patt` (for example `\_csPatt`) is the language `<number>` declared by `\chardef`.
   * `\<iso-code>lang` 
     (for example \`\enlang`, \`\cslang`, \`\sklang`, \`\delang`, \`\pllang`) 
     is language selector.  It exists in two states
     \begitems
     * Initialization state: when `\<iso-code>lang` is used first then it
       must load the patterns into memory using Lua code. If it is done then 
       the `\<iso-code>lang` re-defines itself to processing state.
     * Processing state: it only sets `\language=\_<iso-code>Patt`, i.e it
       selects the hyphenation patterns. It does a little more
       language-dependent work, as mentioned below.
     \enditems
   * `\_langspecific:<isocode>` is processed by `\<iso-code>lang` and it
     should include language-specific macros declared by user or macro designer.
   \enditems
   The USenglish patters are preloaded first: 
   \_cod -----------------------------

\_chardef\_enPatt=0
\_def\_pattlist{\_enPatt=0}
\_def\_langlist{en(USenglish)}
\_sdef{_lan:0}{en}
\_sdef{_ulan:usenglish}{en}
\_def\_enlang{\_uselang{en}\_enPatt23} % \lefthyph=2 \righthyph=3
\_def\enlang{\_enlang}
\_sdef{_langspecific:en}{\_nonfrenchspacing}

\_lefthyphenmin=2 \_righthyphenmin=3 % disallow x- or -xx breaks
\_input hyphen  % en(USenglish) patterns from TeX82

   \_doc -----------------------------
   \`\preplang` `<iso-code> <hyph-utf8-spec> <long-lang> <number> <pre-hyph><post-hyph>`
   prepares the\nl `\<iso-code>lang` to its initialization state. Roughly
   speaking, it does:
   \begtt \catcode`\<=13
   \chardef\_<iso-code>Patt = <number>
   \def\_lan:<number> {<iso-code>}
   \def\_ulan:<long-lang> {<iso-code>}
   \def\_<iso-code>lang {%
      \_loadpattrs <hyph-utf8-spec> <number> % loads patterns using Lua code
      \gdef\_<iso-code>lang {\_uselang{<iso-code>}\_<iso-code>Patt <pre-hyph><post-hyph>}
      \_<iso-code>lang                  % runs itself in processing state
   }
   \def\<iso-code>lang {\_<iso-code>lang} % public version \<iso-code>lang
   \endtt
   You can see that `\<iso-code>lang` runs \`\_loadpattrs` `<hyph-utf8-spec> <iso-code>`
   in initialization state and \^`\_uselang` in processing state.
   \_cod -----------------------------

\_def\_preplang #1 #2 #3 #4 #5 {%
   \_ea\_chardef \_csname _#1Patt\_endcsname=#4
   \_sdef{_lan:#4}{#1}\_lowercase{\_sdef{_ulan:#3}}{#1}%
   \_def\_next{\_ea\_noexpand\_csname _#1lang\_endcsname}
   \_ea\_edef \_csname _#1lang\_endcsname {%
      \_noexpand\_loadpattrs #2 #4 % loads patterns
      % re-defines itself
      \_gdef\_next{\_noexpand\_uselang{#1}{\_csname _#1Patt\_endcsname}#5}%
      \_next                                   %  runs itself in processing state
   }
   \_addto\_langlist{ #1(#3)}%
   \_sdef{#1lang\_ea}\_ea{\_csname _#1lang\_endcsname}% unprefixed \<isocode>lang
}
\_def\_loadpattrs#1 #2 {%
   \_wlog{Loading hyphenation: #1 #2}%
   \_directlua{
      local function read_file(name)
         local file = assert(kpse.find_file(name), "Can't find hyphenation "..
               "file '"..name.."', perhaps you don't have the right package "..
               "installed?")
         local f = assert(io.open(file, "r"))
         local data = assert(f:read("*a"))
         f:close()
         return data
      end

      local l = lang.new(#2)
      for _, hyph in ipairs(string.explode("#1", ",")) do
         local lname, star = string.gsub(hyph, "*", "")
         lang.patterns(l, read_file("hyph-"..lname..".pat.txt"))
         if star > 0 then % star means "also load exceptions"
            lang.hyphenation(l, read_file("hyph-"..lname..".hyp.txt"))
         end
      end
    }%
}

   \_doc -----------------------------
   \`\_uselang``{<iso-code>}\_<iso-code>Patt <pre-hyph><post-hyph>`\nl 
   sets `\language`, `\lefthyphenmin`, `\righthyphenmin` and runs
   `\frenchspacing`. This default language-dependent settings
   should be re-declared by `\_langspecific:<iso-code>` which is run
   finally (it is `\relax` by default, only `\_langspecific:en` runs
   \^`\nonfrenchspacing`).
   \_cod -----------------------------

\_def\_uselang#1#2#3#4{\_language=#2\_lefthyphenmin=#3\_righthyphenmin=#4\_relax
   \_frenchspacing  % \nonfrenchspacing can be set in \cs{_langspecific:lan}
   \_cs{_langspecific:#1}%
}
   \_doc -----------------------------
   The \`\uselanguage` `{<long-lang>}` is defined here 
   (for compatibility with e-plain users).
   \_cod -----------------------------

\_def\_uselanguage#1{\_lowercase{\_cs{_\_cs{_ulan:#1}lang}}}
\_public \uselanguage ; 

   \_doc -----------------------------
   The numbers for languages are declared as fixed constants (no
   auto-generated). This concept is inspired from CSplain. 
   There are typical numbers of languages in CSplain: 5=Czech in IL2,
   15=Czech in T1 and 115=Czech in Unicode. We keep these constants
   but we load only Unicode patterns (greater than 100), of course.
   \_cod -----------------------------

\_preplang enus en-us*            USenglishmax    100 23
\_preplang engb en-gb*            UKenglish       101 23
\_preplang it   it                Italian         102 22
\_preplang ia   ia*               Interlingua     103 22
\_preplang id   id*               Indonesian      104 22

\_preplang cs   cs*               Czech           115 23
\_preplang sk   sk*               Slovak          116 23
\_preplang de   de-1996           nGerman         121 22
\_preplang fr   fr                French          122 22
\_preplang pl   pl*               Polish          123 22
\_preplang cy   cy                Welsh           124 23
\_preplang da   da                Danish          125 22
\_preplang es   es                Spanish         126 22
\_preplang sl   sl                Slovenian       128 22
\_preplang fi   fi                Finnish         129 22
\_preplang hu   hu                Hungarian       130 22
\_preplang tr   tr                Turkish         131 22
\_preplang et   et                Estonian        132 23
\_preplang eu   eu                Basque          133 22
\_preplang ga   ga*               Irish           134 23
\_preplang nb   nb*               Bokmal          135 22
\_preplang nn   nn*               Nynorsk         136 22
\_preplang nl   nl*               Dutch           137 22
\_preplang pt   pt*               Portuguese      138 23
\_preplang ro   ro                Romanian        139 22
\_preplang hr   hr                Croatian        140 22
\_preplang zh   zh-latn-pinyin    Pinyin          141 11
\_preplang is   is                Icelandic       142 22
\_preplang hsb  hsb*              Uppersorbian    143 22
\_preplang af   af*               Afrikaans       144 12
\_preplang gl   gl                Galician        145 22
\_preplang kmr  kmr               Kurmanji        146 22
\_preplang tk   tk                Turkmen         147 22
\_preplang la   la                Latin           148 22
\_preplang lac  la-x-classic      classicLatin    149 22
\_preplang lal  la-x-liturgic     liturgicalLatin 150 22
\_preplang elm  el-monoton        monoGreek       201 11
\_preplang elp  el-polyton        Greek           202 11
\_preplang grc  grc               ancientGreek    203 11
\_preplang ca   ca*               Catalan         204 22
\_preplang cop  cop               Coptic          205 11
\_preplang mn   mn-cyrl           Mongolian       206 22
\_preplang sa   sa                Sanskrit        207 13
\_preplang ru   ru*               Russian         208 22
\_preplang uk   uk                Ukrainian       209 22
\_preplang hy   hy                Armenian        210 12
\_preplang as   as                Assamese        211 11
\_preplang hi   hi                Hindi           212 11
\_preplang kn   kn                Kannada         213 11
\_preplang lv   lv                Latvian         215 22
\_preplang lt   lt                Lithuanian      216 22
\_preplang ml   ml                Malayalam       217 11
\_preplang mr   mr                Marathi         218 11
\_preplang or   or                Oriya           219 11
\_preplang pa   pa                Panjabi         220 11
\_preplang ta   ta                Tamil           221 11
\_preplang te   te                Telugu          222 11

\_preplang be   be                Belarusian      223 22
\_preplang bg   bg                Bulgarian       224 22
\_preplang bn   bn                Bengali         225 11
\_preplang cu   cu*               churchslavonic  226 12
%\_preplang ??  de-1901           German              22
\_preplang gsw  de-ch-1901        swissGerman     227 22
\_preplang eo   eo                Esperanto       228 22
\_preplang fur  fur               Friulan         229 22
\_preplang gu   gu                Gujarati        230 11
\_preplang ka   ka                Georgian        231 12
\_preplang mk   mk                Macedonian      232 22
%\_preplang ??  mul-ethi          Ethiopic            11
\_preplang oc   oc                Occitan         233 22
\_preplang pi   pi                Pali            234 12
\_preplang pms  pms               Piedmontese     235 22
\_preplang rm   rm                Romansh         236 22
\_preplang sr   sh-cyrl*,sh-latn* Serbian         237 22
\_preplang sv   sv                Swedish         238 22
\_preplang th   th                Thai            239 23

   \_doc -----------------------------
   The \`\langlist` includes names of all languages which are ready to load
   and use their hyphenation patterns. This list is printed to terminal and
   to log at ini\TeX/ state here. It can be used when processing document too.
   \_cod -----------------------------

\_message{Language hyph.patterns ready to load: \_langlist.
   Use \_string\<shortname>lang to initialize language,
   \_string\cslang\_space for example}

\_public \langlist ;

\_endcode % ---------------------------------------------


Maybe, you need to do more language specific actions than just switching
hyphenation patterns. For example you need to load a specific font with a
specific script used in selected language, you can define a macros for
quotation marks depending on the language etc.

The example shows how to declare such language specific things.

\begtt
\def\langset #1 #2{\sdef{_langspecific:#1}{#2}}

\langset fr {... declare French quotation marks}
\langset de {... declare German quotation marks}
\langset gr {... switch to Greek fonts family}
... etc. 
\endtt

Note that you need not to set language specific phrases (like `\today`) 
by this code. Another concept is used for such tasks. See the 
section~\ref[langphrases] for more details.
